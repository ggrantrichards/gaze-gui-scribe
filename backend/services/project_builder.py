"""
Project Structure Builder
Creates a complete Next.js or Vite project structure from generated components
Similar to v0, bolt.new, and lovable.dev
"""

import os
from typing import List, Dict
from datetime import datetime
from services.shadcn_components import get_shadcn_components

def create_project_structure(components: List[Dict], project_type: str = "nextjs") -> Dict:
    """
    Create a complete project structure with all generated components
    
    Args:
        components: List of generated components with code and metadata
        project_type: "nextjs" or "vite"
    
    Returns:
        Dictionary with file paths and contents
    """
    
    project_name = f"gaze-generated-project-{datetime.now().strftime('%Y%m%d-%H%M%S')}"
    
    if project_type == "nextjs":
        return create_nextjs_structure(components, project_name)
    else:
        return create_vite_structure(components, project_name)


def create_nextjs_structure(components: List[Dict], project_name: str) -> Dict:
    """Create Next.js 14+ project structure with App Router"""
    
    files = {}
    
    # Package.json
    files['package.json'] = {
        "name": project_name,
        "version": "0.1.0",
        "private": True,
        "scripts": {
            "dev": "next dev",
            "build": "next build",
            "start": "next start",
            "lint": "next lint"
        },
        "dependencies": {
            "react": "^18.2.0",
            "react-dom": "^18.2.0",
            "next": "^14.1.0",
            "framer-motion": "^10.16.0",
            "lucide-react": "^0.294.0",
            "class-variance-authority": "^0.7.0",
            "clsx": "^2.0.0",
            "tailwind-merge": "^2.0.0"
        },
        "devDependencies": {
            "typescript": "^5.3.0",
            "@types/node": "^20.0.0",
            "@types/react": "^18.2.0",
            "@types/react-dom": "^18.2.0",
            "tailwindcss": "^3.4.0",
            "postcss": "^8.4.0",
            "autoprefixer": "^10.4.0",
            "eslint": "^8.0.0",
            "eslint-config-next": "^14.1.0"
        }
    }
    
    # TypeScript config
    files['tsconfig.json'] = {
        "compilerOptions": {
            "target": "ES2020",
            "lib": ["ES2020", "DOM", "DOM.Iterable"],
            "jsx": "preserve",
            "module": "ESNext",
            "moduleResolution": "bundler",
            "resolveJsonModule": True,
            "allowJs": True,
            "strict": True,
            "noEmit": True,
            "esModuleInterop": True,
            "skipLibCheck": True,
            "forceConsistentCasingInFileNames": True,
            "incremental": True,
            "plugins": [{"name": "next"}],
            "paths": {
                "@/*": ["./*"]
            }
        },
        "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
        "exclude": ["node_modules"]
    }
    
    # Tailwind config
    files['tailwind.config.ts'] = """import type { Config } from 'tailwindcss'

const config: Config = {
  content: [
    './pages/**/*.{js,ts,jsx,tsx,mdx}',
    './components/**/*.{js,ts,jsx,tsx,mdx}',
    './app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    extend: {
      colors: {
        primary: '#3b82f6',
        secondary: '#8b5cf6',
      },
    },
  },
  plugins: [],
}
export default config
"""
    
    # PostCSS config
    files['postcss.config.js'] = """module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
"""
    
    # Global styles
    files['app/globals.css'] = """@tailwind base;
@tailwind components;
@tailwind utilities;

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

html {
  scroll-behavior: smooth;
}

* {
  scroll-padding-top: 80px;
}

body {
  font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}
"""
    
    # Root layout
    files['app/layout.tsx'] = """import type { Metadata } from 'next'
import './globals.css'

export const metadata: Metadata = {
  title: 'Gaze-Generated Project',
  description: 'Generated by GazeBuilder - AI-powered UI generation with gaze tracking',
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body>{children}</body>
    </html>
  )
}
"""
    
    # Generate main page that imports all components
    component_imports = []
    component_renders = []
    
    for i, comp in enumerate(components):
        comp_name = comp.get('name', f'Section{i+1}')
        # Clean component name for import
        safe_name = ''.join(c for c in comp_name if c.isalnum())
        component_imports.append(f"import {safe_name} from '@/components/{safe_name}'")
        component_renders.append(f"      <{safe_name} />")
        
        # Save individual component
        files[f'components/{safe_name}.tsx'] = comp['code']
    
    # Main page
    files['app/page.tsx'] = f"""import React from 'react'
{chr(10).join(component_imports)}

export default function Home() {{
  return (
    <main className="min-h-screen bg-white">
{chr(10).join(component_renders)}
    </main>
  )
}}
"""
    
    # Add shadcn/ui components
    shadcn_files = get_shadcn_components()
    files.update(shadcn_files)
    
    # README
    files['README.md'] = f"""# {project_name}

Generated by **GazeBuilder** - AI-powered UI generation with gaze tracking

## [STARTING] Getting Started

### Prerequisites
- Node.js 18+ and npm

### Installation

```bash
npm install
```

### Development

```bash
npm run dev
```

Open [http://localhost:3000](http://localhost:3000) to view your app.

### Build for Production

```bash
npm run build
npm start
```

## ðŸ“¦ Project Structure

```
{project_name}/
â”œâ”€â”€ app/
â”‚   â”œâ”€â”€ layout.tsx       # Root layout
â”‚   â”œâ”€â”€ page.tsx         # Main landing page
â”‚   â””â”€â”€ globals.css      # Global styles
â”œâ”€â”€ components/
â”‚   â”œâ”€â”€ Navigation.tsx   # Navigation bar
â”‚   â”œâ”€â”€ Hero.tsx         # Hero section
â”‚   â”œâ”€â”€ Features.tsx     # Features section
â”‚   â””â”€â”€ ...              # Other components
â”œâ”€â”€ package.json
â”œâ”€â”€ tsconfig.json
â”œâ”€â”€ tailwind.config.ts
â””â”€â”€ README.md
```

## ðŸŽ¨ Technologies

- **Next.js 14** - React framework with App Router
- **TypeScript** - Type-safe development
- **Tailwind CSS** - Utility-first styling
- **React 18** - UI library

## [NOTE] Generated Components

{chr(10).join([f"- `{comp.get('name', f'Section{i+1}')}` - {comp.get('description', 'Component section')}" for i, comp in enumerate(components)])}

## ðŸ”§ Customization

All components are fully customizable. Edit files in the `components/` directory to modify styling, content, or behavior.

## ðŸ“„ License

MIT - Generated by GazeBuilder

---

**Built with GazeBuilder** - The future of AI-powered web development [STARTING]
"""
    
    # .gitignore
    files['.gitignore'] = """# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env*.local

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts
"""
    
    # next.config.js
    files['next.config.js'] = """/** @type {import('next').NextConfig} */
const nextConfig = {}

module.exports = nextConfig
"""
    
    return {
        'project_name': project_name,
        'project_type': 'nextjs',
        'files': files
    }


def create_vite_structure(components: List[Dict], project_name: str) -> Dict:
    """Create Vite + React + TypeScript project structure"""
    
    files = {}
    
    # Package.json
    files['package.json'] = {
        "name": project_name,
        "private": True,
        "version": "0.0.0",
        "type": "module",
        "scripts": {
            "dev": "vite",
            "build": "tsc && vite build",
            "preview": "vite preview",
            "lint": "eslint . --ext ts,tsx --report-unused-disable-directives --max-warnings 0"
        },
        "dependencies": {
            "react": "^18.2.0",
            "react-dom": "^18.2.0"
        },
        "devDependencies": {
            "@types/react": "^18.2.0",
            "@types/react-dom": "^18.2.0",
            "@typescript-eslint/eslint-plugin": "^6.0.0",
            "@typescript-eslint/parser": "^6.0.0",
            "@vitejs/plugin-react": "^4.2.0",
            "autoprefixer": "^10.4.0",
            "eslint": "^8.0.0",
            "eslint-plugin-react-hooks": "^4.6.0",
            "eslint-plugin-react-refresh": "^0.4.0",
            "postcss": "^8.4.0",
            "tailwindcss": "^3.4.0",
            "typescript": "^5.3.0",
            "vite": "^5.0.0"
        }
    }
    
    # Vite config
    files['vite.config.ts'] = """import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import path from 'path'

export default defineConfig({
  plugins: [react()],
  resolve: {
    alias: {
      '@': path.resolve(__dirname, './src'),
    },
  },
})
"""
    
    # TypeScript config
    files['tsconfig.json'] = {
        "compilerOptions": {
            "target": "ES2020",
            "useDefineForClassFields": True,
            "lib": ["ES2020", "DOM", "DOM.Iterable"],
            "module": "ESNext",
            "skipLibCheck": True,
            "moduleResolution": "bundler",
            "allowImportingTsExtensions": True,
            "resolveJsonModule": True,
            "isolatedModules": True,
            "noEmit": True,
            "jsx": "react-jsx",
            "strict": True,
            "noUnusedLocals": True,
            "noUnusedParameters": True,
            "noFallthroughCasesInSwitch": True,
            "paths": {
                "@/*": ["./src/*"]
            }
        },
        "include": ["src"],
        "references": [{"path": "./tsconfig.node.json"}]
    }
    
    # Similar structure for components, styles, etc.
    # (Rest of Vite setup similar to Next.js but with src/ directory)
    
    return {
        'project_name': project_name,
        'project_type': 'vite',
        'files': files
    }

