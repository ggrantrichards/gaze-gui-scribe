/**
 * Live Component Preview
 * Renders generated React components in real-time
 * 
 * Uses iframe sandbox for security
 */

import React, { useEffect, useRef, useState } from 'react'
import type { ComponentNode } from '@/types'

interface LiveComponentPreviewProps {
  component: ComponentNode
  onClose?: () => void
}

export function LiveComponentPreview({ component, onClose }: LiveComponentPreviewProps) {
  const [error, setError] = useState<string | null>(null)
  const [previewHTML, setPreviewHTML] = useState<string>('')
  const [iframeError, setIframeError] = useState<string | null>(null)
  const iframeRef = useRef<HTMLIFrameElement>(null)

  useEffect(() => {
    try {
      // Build complete HTML document with the component
      const html = buildPreviewHTML(component.code)
      setPreviewHTML(html)
      setError(null)
      
      // Log for debugging
      console.log('üîç Preview HTML generated')
      console.log('üìù Component code:', component.code.substring(0, 200) + '...')
    } catch (err) {
      const errorMsg = err instanceof Error ? err.message : 'Preview failed'
      console.error('‚ùå Preview generation error:', err)
      setError(errorMsg)
    }
  }, [component.code])

  // Listen for errors from iframe
  useEffect(() => {
    const handleMessage = (event: MessageEvent) => {
      if (event.data.type === 'error') {
        console.error('‚ùå Iframe error:', event.data.error)
        setIframeError(event.data.error)
      } else if (event.data.type === 'loaded') {
        console.log('‚úÖ Iframe loaded successfully')
        setIframeError(null)
      }
    }

    window.addEventListener('message', handleMessage)
    return () => window.removeEventListener('message', handleMessage)
  }, [])

  return (
    <div className="fixed inset-0 bg-black/50 flex items-center justify-center p-4" style={{ zIndex: 9998 }}>
      <div className="bg-slate-900 rounded-lg shadow-2xl border border-slate-700 max-w-6xl w-full max-h-[90vh] flex flex-col">
        {/* Header */}
        <div className="border-b border-slate-700 p-4 flex justify-between items-center">
          <div>
            <h3 className="text-xl font-bold text-white">{component.name} - Live Preview</h3>
            <p className="text-xs text-slate-400 mt-1">
              Generated by {component.agentType === 'component-generator' ? 'Fetch.ai Agent' : 'AI'}
            </p>
          </div>
          <button
            onClick={onClose}
            className="text-slate-400 hover:text-white transition-colors p-2 hover:bg-slate-800 rounded"
            aria-label="Close preview"
          >
            <svg className="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>

        {/* Preview Area */}
        <div className="flex-1 overflow-auto p-4 grid grid-cols-2 gap-4">
          {/* Live Preview */}
          <div className="space-y-2">
            <div className="flex justify-between items-center">
              <h4 className="text-sm font-semibold text-slate-300">Live Preview</h4>
              <div className="flex gap-2">
                <button className="text-xs px-2 py-1 bg-slate-800 rounded hover:bg-slate-700 text-slate-300">
                  üì± Mobile
                </button>
                <button className="text-xs px-2 py-1 bg-blue-600 rounded text-white">
                  üíª Desktop
                </button>
              </div>
            </div>
            
            <div className="bg-white rounded-lg border-2 border-slate-700 overflow-hidden" style={{ minHeight: 400 }}>
              {error || iframeError ? (
                <div className="p-4">
                  <div className="bg-red-50 border border-red-200 rounded-lg p-4">
                    <p className="font-semibold text-red-800 mb-2">‚ö†Ô∏è Preview Error</p>
                    <p className="text-sm text-red-700 mb-3">
                      {error || iframeError}
                    </p>
                    <details className="text-xs text-red-600">
                      <summary className="cursor-pointer font-medium mb-2">üîç Debug Info</summary>
                      <div className="bg-red-100 p-2 rounded mt-2">
                        <p className="mb-1"><strong>Component:</strong> {component.name}</p>
                        <p className="mb-1"><strong>Type:</strong> {component.type}</p>
                        <p className="mb-2"><strong>Code length:</strong> {component.code.length} chars</p>
                        <p className="text-xs bg-white p-2 rounded overflow-auto max-h-32">
                          <strong>First 300 chars:</strong><br/>
                          {component.code.substring(0, 300)}...
                        </p>
                      </div>
                    </details>
                    <div className="flex gap-2 mt-3">
                      <button 
                        onClick={() => {
                          setError(null)
                          setIframeError(null)
                        }} 
                        className="text-xs bg-red-600 hover:bg-red-700 text-white px-3 py-1.5 rounded"
                      >
                        Try Again
                      </button>
                      <button 
                        onClick={() => {
                          console.log('Full component code:', component.code)
                          alert('Check browser console (F12) for full code')
                        }} 
                        className="text-xs bg-gray-600 hover:bg-gray-700 text-white px-3 py-1.5 rounded"
                      >
                        Log to Console
                      </button>
                    </div>
                  </div>
                </div>
              ) : (
                <>
                  <iframe
                    ref={iframeRef}
                    title={`Preview of ${component.name}`}
                    srcDoc={previewHTML}
                    sandbox="allow-scripts allow-same-origin"
                    className="w-full h-full border-0"
                    style={{ minHeight: 400 }}
                  />
                  {!previewHTML && (
                    <div className="absolute inset-0 flex items-center justify-center bg-white">
                      <div className="text-center">
                        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
                        <p className="text-gray-600">Loading preview...</p>
                      </div>
                    </div>
                  )}
                </>
              )}
            </div>
            
            <p className="text-xs text-slate-500">
              üëÅÔ∏è Look at the preview above to track your gaze patterns
            </p>
          </div>

          {/* Code View */}
          <div className="space-y-2">
            <div className="flex justify-between items-center">
              <h4 className="text-sm font-semibold text-slate-300">Component Code</h4>
              <button
                onClick={() => {
                  navigator.clipboard.writeText(component.code)
                }}
                className="text-xs px-2 py-1 bg-slate-800 rounded hover:bg-slate-700 text-slate-300"
              >
                üìã Copy
              </button>
            </div>
            
            <pre className="bg-slate-950 rounded-lg p-4 overflow-auto text-xs text-slate-300 border border-slate-800" style={{ maxHeight: 500 }}>
              <code>{component.code}</code>
            </pre>
            
            <div className="text-xs text-slate-500 space-y-1">
              <p>Created: {new Date(component.createdAt).toLocaleString()}</p>
              <p>Type: {component.type}</p>
              {component.gazeMetrics && (
                <p>Attention Score: {component.gazeMetrics.attentionScore}/100</p>
              )}
            </div>
          </div>
        </div>

        {/* Footer */}
        <div className="border-t border-slate-700 p-4 bg-slate-900">
          <div className="flex justify-between items-center">
            <div className="text-xs text-slate-400">
              üí° Tip: Your gaze is being tracked as you view this preview
            </div>
            <div className="flex gap-2">
              <button
                className="px-4 py-2 bg-slate-800 hover:bg-slate-700 text-white rounded-lg transition-colors text-sm"
                onClick={onClose}
              >
                Close
              </button>
              <button
                className="px-4 py-2 bg-purple-600 hover:bg-purple-700 text-white rounded-lg transition-colors text-sm"
                onClick={() => {
                  // TODO: Implement export functionality
                  alert('Export feature coming soon!')
                }}
              >
                Export Component
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}

/**
 * Build complete HTML for preview
 * Includes React, Tailwind CSS, and the component code
 * 
 * Implementation Notes for Designers/Developers:
 * - Uses React 18 with hooks (useState, useEffect)
 * - Tailwind CSS v3 from CDN for styling
 * - Babel standalone transforms JSX to JavaScript in browser
 * - Component is wrapped in a root div for clean rendering
 */
function buildPreviewHTML(componentCode: string): string {
  // Extract component name from code
  // Matches: export function MyComponent or export default function MyComponent
  const componentNameMatch = componentCode.match(/(?:export\s+(?:default\s+)?(?:function|const)\s+)(\w+)/)
  const componentName = componentNameMatch ? componentNameMatch[1] : 'Component'

  // Clean up the component code (remove export statements for inline use)
  const cleanedCode = componentCode
    .replace(/^import\s+.*from.*$/gm, '') // Remove import statements
    .replace(/^export\s+(default\s+)?/gm, '') // Remove export keywords

  return `<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Component Preview - ${componentName}</title>
  
  <!-- Tailwind CSS v3 - Full utility classes -->
  <script src="https://cdn.tailwindcss.com"></script>
  
  <!-- Configure Tailwind for dark mode and custom colors -->
  <script>
    tailwind.config = {
      darkMode: 'class',
      theme: {
        extend: {
          colors: {
            primary: '#3b82f6',
            secondary: '#8b5cf6',
          }
        }
      }
    }
  </script>
  
  <!-- React 18 - UI Library -->
  <script crossorigin src="https://unpkg.com/react@18/umd/react.production.min.js"></script>
  <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js"></script>
  
  <!-- Babel Standalone - JSX to JavaScript transformer -->
  <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
  
  <style>
    /* Base styles for clean rendering */
    * {
      box-sizing: border-box;
    }
    
    body {
      margin: 0;
      padding: 0;
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
      background: #f9fafb; /* Light gray background */
    }
    
    #root {
      min-height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
      padding: 20px;
    }
    
    /* Smooth transitions for interactive elements */
    button, input, select, textarea {
      transition: all 0.2s ease-in-out;
    }
    
    /* Focus styles for accessibility */
    *:focus {
      outline: 2px solid #3b82f6;
      outline-offset: 2px;
    }
  </style>
</head>
<body>
  <!-- Root element where React component renders -->
  <div id="root"></div>
  
  <!-- Component code and rendering logic -->
  <script type="text/babel" data-presets="react,typescript">
    // React hooks available
    const { useState, useEffect, useCallback, useMemo, useRef } = React;

    // ==========================================
    // ERROR BOUNDARY COMPONENT
    // ==========================================
    class ErrorBoundary extends React.Component {
      constructor(props) {
        super(props);
        this.state = { hasError: false, error: null };
      }

      static getDerivedStateFromError(error) {
        return { hasError: true, error };
      }

      componentDidCatch(error, errorInfo) {
        console.error('Component error:', error, errorInfo);
        window.parent.postMessage({
          type: 'error',
          error: error.message + ' (Caught by ErrorBoundary)'
        }, '*');
      }

      render() {
        if (this.state.hasError) {
          return (
            <div style={{
              padding: '20px',
              background: '#fee2e2',
              color: '#991b1b',
              borderRadius: '8px',
              maxWidth: '600px',
              margin: '20px',
              fontFamily: 'sans-serif'
            }}>
              <h2 style={{ margin: '0 0 10px 0' }}>Component Error</h2>
              <p style={{ margin: '0' }}>{this.state.error?.message || 'Unknown error'}</p>
            </div>
          );
        }

        return this.props.children;
      }
    }
    
    // ==========================================
    // GENERATED COMPONENT CODE
    // ==========================================
    ${cleanedCode}
    
    // ==========================================
    // RENDER COMPONENT
    // ==========================================
    try {
      console.log('üöÄ Attempting to render component:', '${componentName}');
      
      // Notify parent that we're loading
      window.parent.postMessage({ type: 'loaded' }, '*');
      
      // Create React 18 root
      const root = ReactDOM.createRoot(document.getElementById('root'));
      
      // Render component with error boundary
      root.render(
        <React.StrictMode>
          <ErrorBoundary>
            <${componentName} />
          </ErrorBoundary>
        </React.StrictMode>
      );
      
      console.log('‚úÖ Component rendered successfully');
    } catch (error) {
      console.error('‚ùå Component render error:', error);
      
      // Notify parent of error
      window.parent.postMessage({ 
        type: 'error', 
        error: error.message + ' (Check console for details)'
      }, '*');
      
      document.getElementById('root').innerHTML = \`
        <div style="padding: 20px; background: #fee2e2; color: #991b1b; border-radius: 8px; max-width: 600px; margin: 20px;">
          <h2 style="margin: 0 0 10px 0; font-size: 18px;">‚ö†Ô∏è Component Error</h2>
          <p style="margin: 0 0 10px 0; font-size: 14px;"><strong>Message:</strong> \${error.message}</p>
          <details style="margin-top: 10px;">
            <summary style="cursor: pointer; font-weight: 600;">üîç Stack Trace</summary>
            <pre style="margin-top: 10px; font-size: 11px; overflow: auto; background: white; padding: 10px; border-radius: 4px;">\${error.stack}</pre>
          </details>
          <div style="margin-top: 15px; padding: 10px; background: white; border-radius: 4px; font-size: 12px;">
            <strong>üí° Common fixes:</strong>
            <ul style="margin: 5px 0; padding-left: 20px;">
              <li>Check if component name matches function name</li>
              <li>Ensure all hooks are used correctly (e.g., 'useState')</li>
              <li>Verify JSX syntax and closing tags</li>
              <li>Check browser console (F12) for details</li>
            </ul>
          </div>
        </div>
      \`;
    }
  </script>
  
  <!-- Load notification for debugging -->
  <script>
    console.log('‚úÖ Preview loaded successfully');
    console.log('üì¶ Component: ${componentName}');
    console.log('üé® Tailwind CSS: Loaded');
    console.log('‚öõÔ∏è  React: v18');
  </script>
</body>
</html>`
}

